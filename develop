#!/usr/bin/env bash

export APP_PORT=${APP_PORT:-80}
export MYSQL_PORT=${DB_PORT:-3306}
export MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-root}
export MYSQL_DATABASE=${MYSQL_DATABASE:-LARAVEL}
export MYSQL_USER=${MYSQL_USER:-root}
export MYSQL_PASSWORD=${MYSQL_PASSWORD:-root}

COMPOSE="docker-compose"
PSRESULT=$(docker-compose ps -q)

# Crear variable para ejecutar contenedores existentes
if [ ! -z "$PSRESULT" ]; then
    EXEC="yes"
else
    EXEC="no"
fi

if [ $# -gt 0 ]; then

    if [ -f .env ]; then
        source .env
    fi

    if [ "$1" == "start" ]; then
        $COMPOSE up -d

    elif [ "$1" == "stop" ]; then
        $COMPOSE down

    elif [ "$1" == "art" ]; then
        shift 1
        $COMPOSE run --rm \
            -w /var/www/html \
            app \
            php artisan "$@"

    elif [ "$1" == "composer" ]; then
        shift 1
        # si docker-compose est√° en ejecucion
        # reutilizamos el contenedor
        if [ "$EXEC" == "yes" ]; then
            $COMPOSE exec \
                app \
                composer "$@"
        else
            $COMPOSE run --rm \
                -w /var/www/html \
                app \
                composer "$@"
        fi

    elif [ "$1" == "test" ]; then
        shift 1
        $COMPOSE run --rm \
            -w /var/www/html \
            app \
            ./vendor/bin/phpunit "$@"

    elif [ "$1" == "npm" ]; then
        shift 1
        $COMPOSE run --rm \
            -w /var/www/html \
            node \
            npm "$@"

    elif [ "$1" == "gulp" ]; then
        shift 1
        $COMPOSE run --rm \
            -w /var/www/html \
            node \
            ./node_modules/.bin/gulp "$@"

    elif [ "$1" == "yarn" ]; then
        shift 1
        $COMPOSE run --rm \
            -w /var/www/html \
            node \
            yarn "$@"

    else
        $COMPOSE "$@"
    fi
else
    $COMPOSE ps
fi



